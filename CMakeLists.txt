# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(yquake2-128
	LANGUAGES
		C
)

# Operating system.
set(YQ2OSTYPE "${CMAKE_SYSTEM_NAME}" CACHE STRING "Override operation system type")
add_definitions(-DYQ2OSTYPE="${YQ2OSTYPE}")
add_definitions(-DNOUNCRYPT)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
	if(POLICY CMP0135)
		cmake_policy(SET CMP0135 NEW)
	endif()
	message(STATUS "Fetching vcpkg (2023.11.20)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2023.11.20.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

# Packages
find_package(SDL2 REQUIRED)

# Target: common
set(common_SOURCES
	"src/common/argproc.c"
	"src/common/clientserver.c"
	"src/common/cmdparser.c"
	"src/common/collision.c"
	"src/common/crc.c"
	"src/common/cvar.c"
	"src/common/filesystem.c"
	"src/common/frame.c"
	"src/common/glob.c"
	"src/common/md4.c"
	"src/common/movemsg.c"
	"src/common/netchan.c"
	"src/common/pmove.c"
	"src/common/shared/flash.c"
	"src/common/shared/rand.c"
	"src/common/shared/shared.c"
	"src/common/szone.c"
	"src/common/unzip/ioapi.c"
	"src/common/unzip/miniz/miniz.c"
	"src/common/unzip/miniz/miniz_tdef.c"
	"src/common/unzip/miniz/miniz_tinfl.c"
	"src/common/unzip/unzip.c"
	"src/common/zone.c"
	"src/common/header/common.h"
	"src/common/header/crc.h"
	"src/common/header/files.h"
	"src/common/header/glob.h"
	"src/common/header/shared.h"
	"src/common/header/zone.h"
	"src/common/unzip/ioapi.h"
	"src/common/unzip/miniz/miniz.h"
	"src/common/unzip/miniz/miniz_common.h"
	"src/common/unzip/miniz/miniz_export.h"
	"src/common/unzip/miniz/miniz_tdef.h"
	"src/common/unzip/miniz/miniz_tinfl.h"
	"src/common/unzip/miniz/miniz_zip.h"
	"src/common/unzip/miniz/minizconf.h"
	"src/common/unzip/unzip.h"
	cmake.toml
)

add_library(common STATIC)

target_sources(common PRIVATE ${common_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${common_SOURCES})

# Target: game
set(game_SOURCES
	"src/game/g_ai.c"
	"src/game/g_chase.c"
	"src/game/g_cmds.c"
	"src/game/g_combat.c"
	"src/game/g_func.c"
	"src/game/g_items.c"
	"src/game/g_main.c"
	"src/game/g_misc.c"
	"src/game/g_monster.c"
	"src/game/g_phys.c"
	"src/game/g_spawn.c"
	"src/game/g_svcmds.c"
	"src/game/g_target.c"
	"src/game/g_trigger.c"
	"src/game/g_turret.c"
	"src/game/g_utils.c"
	"src/game/g_weapon.c"
	"src/game/monster/berserker/berserker.c"
	"src/game/monster/boss2/boss2.c"
	"src/game/monster/boss3/boss3.c"
	"src/game/monster/boss3/boss31.c"
	"src/game/monster/boss3/boss32.c"
	"src/game/monster/brain/brain.c"
	"src/game/monster/chick/chick.c"
	"src/game/monster/flipper/flipper.c"
	"src/game/monster/float/float.c"
	"src/game/monster/flyer/flyer.c"
	"src/game/monster/gladiator/gladiator.c"
	"src/game/monster/gunner/gunner.c"
	"src/game/monster/hover/hover.c"
	"src/game/monster/infantry/infantry.c"
	"src/game/monster/insane/insane.c"
	"src/game/monster/medic/medic.c"
	"src/game/monster/misc/move.c"
	"src/game/monster/mutant/mutant.c"
	"src/game/monster/parasite/parasite.c"
	"src/game/monster/soldier/soldier.c"
	"src/game/monster/supertank/supertank.c"
	"src/game/monster/tank/tank.c"
	"src/game/player/client.c"
	"src/game/player/hud.c"
	"src/game/player/trail.c"
	"src/game/player/view.c"
	"src/game/player/weapon.c"
	"src/game/savegame/savegame.c"
	"src/game/header/game.h"
	"src/game/header/local.h"
	"src/game/monster/berserker/berserker.h"
	"src/game/monster/boss2/boss2.h"
	"src/game/monster/boss3/boss31.h"
	"src/game/monster/boss3/boss32.h"
	"src/game/monster/brain/brain.h"
	"src/game/monster/chick/chick.h"
	"src/game/monster/flipper/flipper.h"
	"src/game/monster/float/float.h"
	"src/game/monster/flyer/flyer.h"
	"src/game/monster/gladiator/gladiator.h"
	"src/game/monster/gunner/gunner.h"
	"src/game/monster/hover/hover.h"
	"src/game/monster/infantry/infantry.h"
	"src/game/monster/insane/insane.h"
	"src/game/monster/medic/medic.h"
	"src/game/monster/misc/player.h"
	"src/game/monster/mutant/mutant.h"
	"src/game/monster/parasite/parasite.h"
	"src/game/monster/soldier/soldier.h"
	"src/game/monster/supertank/supertank.h"
	"src/game/monster/tank/tank.h"
	"src/game/savegame/savegame.h"
	"src/game/savegame/tables/clientfields.h"
	"src/game/savegame/tables/fields.h"
	"src/game/savegame/tables/gamefunc_decs.h"
	"src/game/savegame/tables/gamefunc_list.h"
	"src/game/savegame/tables/gamemmove_decs.h"
	"src/game/savegame/tables/gamemmove_list.h"
	"src/game/savegame/tables/levelfields.h"
	cmake.toml
)

add_library(game STATIC)

target_sources(game PRIVATE ${game_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${game_SOURCES})

# Target: client
set(client_SOURCES
	"src/client/cl_cin.c"
	"src/client/cl_console.c"
	"src/client/cl_download.c"
	"src/client/cl_effects.c"
	"src/client/cl_entities.c"
	"src/client/cl_input.c"
	"src/client/cl_inventory.c"
	"src/client/cl_keyboard.c"
	"src/client/cl_lights.c"
	"src/client/cl_main.c"
	"src/client/cl_network.c"
	"src/client/cl_parse.c"
	"src/client/cl_particles.c"
	"src/client/cl_prediction.c"
	"src/client/cl_screen.c"
	"src/client/cl_tempentities.c"
	"src/client/cl_view.c"
	"src/client/curl/download.c"
	"src/client/curl/qcurl.c"
	"src/client/input/sdl.c"
	"src/client/menu/menu.c"
	"src/client/menu/qmenu.c"
	"src/client/menu/videomenu.c"
	"src/client/sound/ogg.c"
	"src/client/sound/openal.c"
	"src/client/sound/qal.c"
	"src/client/sound/sdl.c"
	"src/client/sound/sound.c"
	"src/client/sound/wave.c"
	"src/client/vid/glimp_sdl.c"
	"src/client/vid/vid.c"
	"src/client/curl/header/download.h"
	"src/client/curl/header/qcurl.h"
	"src/client/header/client.h"
	"src/client/header/console.h"
	"src/client/header/keyboard.h"
	"src/client/header/screen.h"
	"src/client/input/header/input.h"
	"src/client/menu/header/qmenu.h"
	"src/client/refresh/constants/anorms.h"
	"src/client/refresh/constants/anormtab.h"
	"src/client/refresh/constants/warpsin.h"
	"src/client/refresh/files/stb_image.h"
	"src/client/refresh/files/stb_image_resize.h"
	"src/client/refresh/ref_shared.h"
	"src/client/refresh/soft/header/local.h"
	"src/client/refresh/soft/header/model.h"
	"src/client/sound/header/local.h"
	"src/client/sound/header/qal.h"
	"src/client/sound/header/sound.h"
	"src/client/sound/header/stb_vorbis.h"
	"src/client/sound/header/vorbis.h"
	"src/client/vid/header/ref.h"
	"src/client/vid/header/stb_image_write.h"
	"src/client/vid/header/vid.h"
	"src/client/vid/icon/q2icon64.h"
	"src/server/sv_cmd.c"
	"src/server/sv_conless.c"
	"src/server/sv_entities.c"
	"src/server/sv_game.c"
	"src/server/sv_init.c"
	"src/server/sv_main.c"
	"src/server/sv_save.c"
	"src/server/sv_send.c"
	"src/server/sv_user.c"
	"src/server/sv_world.c"
	"src/common/header/common.h"
	"src/common/header/crc.h"
	"src/common/header/files.h"
	"src/common/header/glob.h"
	"src/common/header/shared.h"
	"src/common/header/zone.h"
	"src/common/unzip/ioapi.h"
	"src/common/unzip/unzip.h"
	"src/common/unzip/miniz/miniz.h"
	"src/common/unzip/miniz/miniz_tdef.h"
	"src/common/unzip/miniz/miniz_tinfl.h"
	"src/common/unzip/miniz/minizconf.h"
	"src/server/header/server.h"
	cmake.toml
)

add_library(client STATIC)

target_sources(client PRIVATE ${client_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${client_SOURCES})

target_link_libraries(client PUBLIC
	SDL2::SDL2
)

# Target: server
set(server_SOURCES
	"src/common/header/common.h"
	"src/common/header/crc.h"
	"src/common/header/files.h"
	"src/common/header/glob.h"
	"src/common/header/shared.h"
	"src/common/header/zone.h"
	"src/common/unzip/ioapi.h"
	"src/common/unzip/unzip.h"
	"src/common/unzip/miniz/miniz.h"
	"src/common/unzip/miniz/miniz_tdef.h"
	"src/common/unzip/miniz/miniz_tinfl.h"
	"src/common/unzip/miniz/minizconf.h"
	"src/server/sv_cmd.c"
	"src/server/sv_conless.c"
	"src/server/sv_entities.c"
	"src/server/sv_game.c"
	"src/server/sv_init.c"
	"src/server/sv_main.c"
	"src/server/sv_save.c"
	"src/server/sv_send.c"
	"src/server/sv_user.c"
	"src/server/sv_world.c"
	"src/server/header/server.h"
	cmake.toml
)

add_library(server STATIC)

target_sources(server PRIVATE ${server_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${server_SOURCES})

# Target: refresh-soft
set(refresh-soft_SOURCES
	"src/client/refresh/soft/sw_aclip.c"
	"src/client/refresh/soft/sw_alias.c"
	"src/client/refresh/soft/sw_bsp.c"
	"src/client/refresh/soft/sw_draw.c"
	"src/client/refresh/soft/sw_edge.c"
	"src/client/refresh/soft/sw_image.c"
	"src/client/refresh/soft/sw_light.c"
	"src/client/refresh/soft/sw_main.c"
	"src/client/refresh/soft/sw_misc.c"
	"src/client/refresh/soft/sw_model.c"
	"src/client/refresh/soft/sw_part.c"
	"src/client/refresh/soft/sw_poly.c"
	"src/client/refresh/soft/sw_polyset.c"
	"src/client/refresh/soft/sw_rast.c"
	"src/client/refresh/soft/sw_scan.c"
	"src/client/refresh/soft/sw_sprite.c"
	"src/client/refresh/soft/sw_surf.c"
	"src/client/refresh/files/models.c"
	"src/client/refresh/files/pcx.c"
	"src/client/refresh/files/stb.c"
	"src/client/refresh/files/surf.c"
	"src/client/refresh/files/wal.c"
	"src/client/refresh/files/pvs.c"
	"src/client/refresh/ref_shared.h"
	"src/client/refresh/files/stb_image.h"
	"src/client/refresh/files/stb_image_resize.h"
	"src/client/refresh/soft/header/local.h"
	"src/client/refresh/soft/header/model.h"
	"src/common/header/shared.h"
	cmake.toml
)

add_library(refresh-soft STATIC)

target_sources(refresh-soft PRIVATE ${refresh-soft_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${refresh-soft_SOURCES})

target_link_libraries(refresh-soft PUBLIC
	SDL2::SDL2
)

# Target: yq2-128
set(yq2-128_SOURCES
	"src/backends/generic/misc.c"
	cmake.toml
)

if(WIN32) # windows
	list(APPEND yq2-128_SOURCES
		"src/backends/windows/icon.rc"
		"src/backends/windows/main.c"
		"src/backends/windows/network.c"
		"src/backends/windows/shared/hunk.c"
		"src/backends/windows/system.c"
		"src/backends/windows/header/resource.h"
	)
endif()

add_executable(yq2-128)

target_sources(yq2-128 PRIVATE ${yq2-128_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${yq2-128_SOURCES})

if(WIN32) # windows
	target_link_libraries(yq2-128 PRIVATE
		ws2_32
		winmm
	)
endif()

target_link_libraries(yq2-128 PRIVATE
	common
	game
	client
	refresh-soft
	SDL2::SDL2main
)

if(MSVC) # msvc
	target_link_options(yq2-128 PRIVATE
		"/SUBSYSTEM:WINDOWS"
	)
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT yq2-128)
endif()
